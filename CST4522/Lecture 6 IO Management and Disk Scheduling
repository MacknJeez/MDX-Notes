What are some of the main functions performed by the OS?
Process, Threads 
Process address space = set of mem address space assigned to a process in the RAM



Input and Output operations.
How the OS does IO management. (any data exchange operation that happens between computing system and external env. 

Catgories of I/O Devices:
HUman Readable (users can interact with. eg. keyboards, printers, mouse)
Machine Readable (ones that comm data in a format that can be understood by the computing system without human input)
Comms Devices (enable transmission of data between computing systems or between computing systems and larger networks)


Differences in I/O Devices:
Data Rate 
Application (or Use Case)
Unit of Transfer (bytes or characters, larger blocks like disks) (keyboard/mouse are character oriented devices, disks are characterized as block oriented devices)
Error Conditions (how the conditions are handles or responded to)



Organization of the I/O Functions:

Programmed I/O:
  The process will send a request for I/O, usually for resource constrained or low speed devices

Interrupt Driven I/O:
  Similar to programmed I/O, but the CPU won't remain in a status checking cycle. The CPU will perform another task, once interrupt is sent then I/O operation happens. 

Direct Memory Access (DMA)
  The DMA module controls exchange of data between main mem and I/O device




DMA:
Feature of the systems to directly allow the subsystem to access the RAM independently of the CPU 
Overall objective of DMA is to bypass CPU for IP operation.

When a process issues r/w command:
  it issues DMA command
  whether r or w 
  address of I/O device involved
  Starting location of memory to r or w from
  The no of words to be r or w 

With all that done, the DMA command is setup, CPU will do some other task, and the DMA will do it's thing and bypass the CPU, and then send an interrupt to the CPU once it's finished.

The DMA logic can be either built into the I/O device, or the DMA might control multiple I/O devices. 


Operating System Design Issues:
Can use multiprogramming to have a set of ready processes to keep CPU busy for some time. (not 100% use, but maybe 60-70% for embedded systems)
The objective is always to make the I/O device should be easily accessible to all processes. (generality)


Types of I/O Devices:

Block Oriented:
  Info stored in fixed sized blocks (used for disks)

Stream Oriented:
  Resp for data exchange in units of bytes or characters (keyboards, mouse etc)



IO Buffering:
Temp store data in buffer (sysMem) that passes between prcocessor and a peripheral (usually to smooth out difference in rates of data exchange)

Why buffering?
  To deal with speed mismatch between producer and consumer of data
  Certain pages must remain in MainMem during I/O (during the I/O request) 


Synchronous vs Asynchronous I/O operations:

Synchronous I/O
  When a process has requested for an I/O op, the thread has to wait until the I/O operation is complete.
Asynchronous I/O
  Process will not wait for the I/O op to complete. So the thread can continue with other work while it waits for I/O (eg. if subsequent process doesn't depend on the previous process' I/O data)

(buffer = portion of MainMem)
Buffering Schemes:          
  Single Buffer:                                                            (figure 11.6)
    Simplest Type
    One buffer assigned to particular process 

    Advantage of Single Buffer:
      read from ppt 
    
    Disadvantage of Single Buffer:
      Same as all buffering, there's an buffer overhead added to the system
      only one chunk of data can be in buffer at a time


  Double Buffer:
    Fixes the one chunk at a time limit of single buffer 
    but if process is doing a lot of I/O, then you end up needing more buffering

  Circular Buffer:
    More than two buffers used
    FIFO replacement of chunks in buffers



Disk Scheduling:
Scheduling the I/O requests that arrive to the disk

FIFO (sequentially, fair to all processes, can lead to slow downs)
Priority (not to optimize but to meet priority requests of individual processes)
LIFO (most request request, possible starvation as maybe a process just never gets done)
Shortest Service Time First (SSTF) (based on the least movement of the disk arm from current position ie. seek time)
SCAN (arm will move in one directions, satisfy everything it can, and then move backwards AKA Elevator Policy) (biased towards area that is most recently travelled
[the same floor visited right before it starts going backwards])

FSCAN (can be multiple I/O scan ops, all the requests are put in one of the queues, and the other queue is empty. once request is done, it's put into other queue)
N-step-SCAN (same but multiple queues instead of 2)


Algorithm Comparisons:
eg. disk with 200 tracks, requested tracks are (given in ppt)
check answer in ppt, there's a blue table
How to compare these 4 algos?
  add all tracks traversed (take where it's at and where it needs to go, and subtract. use the next track accessed and subtract from previous track accessed and you get the next no. of tracks traversed)
  Consider the track locations for all the algorithms 
  SSTF seems to have lowest seek time
  Pretty close to SCAN

  Most commonly used is SSTF and SCAN, but it depends on the use case. 


Honestly just read the PPTs for this part of the topic sigh
Redundant Array of Independent Disks (RAID):
Redundancy System for Disks, to make redundant copies of data, if one or more gets lost, then the data is not completely gone (based on the type of RAID)

RAID Principles:
  Parity is a way of distributing the data across the drives, so a parity drive that can recreate the data lost in the dead drive
  Mirroring is juts keeping a copy of x number of drives in case of failure 


RAID 0:
  No redundancy but increased performance (better read write operations) by making one drive out of multiple drives 
  For non critical storage as no redundancy (full storage is available to you)
  Best paired with RAID 1

RAID 1:
  Has redundancy
  Has mirroring 
  minimum two drives required
  half the storage available (other half is mirror of first drive)
  Double the read performance, same write performance 

RAID 2:
  hamming code 
  not used too often 
  no of disks req to store ECC is directly prop to log od number of disks


RAID 3:
  Supports parity 
  One disk for parity info 












