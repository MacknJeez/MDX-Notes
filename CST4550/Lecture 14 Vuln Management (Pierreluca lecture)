Virtual Machines
  from a systemic point of view, IT stacks have many components that interact with each other. 
  bare metal vs virtualized vs containerized

Vuln Management = Identifying, evaluating, treating and reporting on sec vulns 
Microsoft says it's a way of preventing attacks and minimizing damage.
from org point of view, there are many assets and accesses to the assets, they have to be informed about all these assets and the vulns that affect them. 
Usually hire companies or analysts/consultants to continuously monitor and manage vulnerabilities. (because new vulns are discovered all the time)
Esp with many systems on the network, expensive to fix vulns (in terms of money and time)

These vulns need to be prioritized, cuz can't fix all of them at the same time. So start from the most critical ones.

Not all vulns are fixed by updates of software. Some might need change in source code

The info gathering might show that company exposes more than required/thought previously.

End goal is to reduce attack surface as much as possible, while keeping functionality and usability high. (balance)

The idea is to provide comprehensive coverage of infra elements. Doesn't mean every time you do penttesting,you have to cover the whole infra. (as agreed on by the agreement between company and us)

The higher the time between each pentest, the higher the window of vuln exposure. So it shouldn't be the only way companies manage vulns.

"Vuln amangement is one way to inform risk related decisions." what mean?
If you're aware of threats or vulns, then you can make important decisions based on how much risk is there. Some risks are acceptable. 
eg. third party software, that doesn't have an alternative. 

The responsiblility may not be on the main company as the software/infra is under control of a subcontractor.

Mitigate doesn't always mean fix completely, just reduce prob or impact of risk
eg. you found sqli, but for some reason it's hard to fix root cause (might be part of core func)
so can fix with WAF, doesn't fix root cause completely, but just adds some control.

Updating the source code or fixing the root cause is when you AVOID the risk, so it's fixed completely.
Maybe the loss of updating or changing functionality is lower than loss of revenue by leaving it in, in that case just remove it. Best way to deal with it then.

Vuln Management Cycle:

It's hard to protect something when you don't know what it is. (Asset management is crucial)
Company can give you a range of subnets, with some exceptions. (large system with some sensitive networks/end points)\
But it doesn't matter to attackers. These sensitive systems should have their own safety like load balancing etc.

There usually is a vuln management engineer/security officer who oversees the vuln manangement process. Sometimes companies who rely on outside companies/subcontractors for this.
This means that if there's a vuln, they become a point of contact/responsible for the server/end points etc.

NIST Cybersec Framework
Imp: Assets need to be identified and managed (so you can know what you're trying to guard)

Vulns must be reproducable, well documented.

Gotta be up-to-date about recent vulns (study about recent vulns)

Based on some factors, risks to the company may be higher or lower than what you find them to be

VUlns are cheaper to fix in design stage rather than final stages

DevSecOps cycle:
Plan (threat modeling) -> Build (security controls on source code, code review)

What does fix/resolve/remediate?
  Updating software or even the configuration of the infra

Are all remdeiations the same?
  No, the ones that fix it completely are better than ones that fix it partially
  Analysis of risk, whichever is most cost effective and fixes the most?
  Fixing the root cause is better than putting controls

  eg Web App with SQL vuln, fixing the vuln is better than putting WAF

eg Apple CPU side-channel attack, so it's physical vuln.
eg. YubiKey, no firmware, if there's a vuln then the physical key has to be changed.

Sometimes compare old software with new patch, and then find the vuln in the old software. And then write exploit for that. Patches aren't installed immediately in all devices all together. Window of exposure. 

Hardening OS, to identify a set of config changes to increase sec of system/reduce attack surface.
eg. install apache web server, this is general purpose install. turning off all functionality that is not needed is hardening the install of web server.

CIS OS hardening guildlines, sometimes can conflict with functionality that's required, so do as much as possible but without reducing func.

Secure Coding

Vuln assessments should also have remediations along with the vulns themselves.































