"Application Layer

Top most layer of OSI model / TCP model / Internet Model

Client Server Architecture
Client Server paradigm key concept: One central server(host), job is to process incoming requests. Client cannot operate independently, always request data from server.
Resides in any type of network (insitute, home, enterprise etc.) 
Cleints do not talk to each other directly, happens via server. 
Scalable: Just make bigger server

P2P Architecture
Each host is equal, each host can play role of client or server. (eg. BitTorrent etc)
Services are distributed, clients talk to each other directly. 
No Always on server, clients come and go. (dynamic network env)
Main challenge with p2p scalability: 
  since it's not always on, scalanility means to be able to grow the network, since devices are not always on, possible that services might not be available "Self scalabiity"
  Management of such networks is complex


Processes Communincating

eg kernel process??, printing process requested by an app
eg for processes on different devices: 2fa (by authenticator or something), client browser and server hosting the browser with whatever information on the browser


Thin Client vs Thick Client

Thin Clients are when the lcient side is not involved in any processing, usually just an interface to access server, the server does the heavy lifting. eg. chatGPT, web interfaces for mails 
If you have outlook on your device, then it becomes a Thick Client, as the client is also involved in processing (eg. you can still see your emails if you're not connected to the internet)

2 tier architecture - client and server
3 tier architecture - add another layer of server, eg. client + server + database


Cloud Computing Architecture

Most of the services are being handled on the cloud. IaaS, PaaS, SaaS (eg online office 365)

SaaS
Multitenancy, everyone shares copy of same application (each machine has parititoned data from main server(s), so each machine doesn't have to run an instance of the software), very little control over hardware

PaaS
You get an env, where you have access to a dev platform (usually in POV of developers), the actual specifications of the servers is not the importance of the service.
Suited for companies that plan to develop

IaaS
Compute and Storage is provided, what region of the world it runs in, you can manage the infrastructure of the systems (eg. on this VM i want a linux system) but underlying hardware is still with the datacenters.


