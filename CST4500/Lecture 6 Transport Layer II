How to know when data is not sent across?
  No ACK from server
  Duplicate ACK from server 

Checksum is for data integrity (error checking)


Today is about TCP, flow control, congestion control, connection oriented reliable transport 
(flow control is about the reciever, congestion control is about the network itself)

Flow Control in TCP:
When a TCP connection is established, a buffer (memory space) is allocated [Flow Control]
What can go wrong with this?
The buffer is a limited size, it can get overloaded when the network layer sends more data than the application layer can handle. This is on a single machine, so it's recieving more data than the application can take out of the buffer.
Once it becomes full, there will be a loss of data (dropped packets)

To manage this, TCP has certain flow control headers (reciever window)
Each side mentions how much data they're willing to accept via the reciever window (not a fixed value, can change at each data transfer) Default value is 4096 usually.
eg. you can see roads that have boards that say trucks and stuff can't cross this road or bridge at certain times to reduce traffic, the board is basically what reciever window is.

Let's say the reciever is willing to recieve 10k bytes (rwnd is 10k)
The sender can send 10 packets (assuming 1k bytes each) regardless of whether ACKs are sent back. 
If 5 of those packets aren recieved, meaning 5 packets are not recieved. So the sender can send the remaining 5 packets again along with another 5 packets (assuming window size/ rwnd is same size)

note: window size is variable, we just assume 10kbyte size for simplicity. The window size is initially decided in the first handshake between the networks.

Why a Three Way Handshake? and not a 2 way handshake?
will 2way handshakes always work in a network?
  there is no guaranteed bandwidth
  could be retransmitted messages cuz of message loss
  messages might get reordered 
  you don't know what's happening on the other side (only doable using seq no and ACKs, which can go out of sync also in 2way)


Scenario:
you open a connection, you send req_conn to server and it takes longer than usual to send the ack back to sender. 
So you send another req_conn to connect again, and in the time that it takes to send the req_conn, the server acknowledges and transfers the required data back to the sender. 
By the time the sender is gone, the server sends the second req_conn but the sender is already gone (dangling connection?)

3way makes sure that the second connection won't happen and makes sure that these scenarios won't happen. 

Like establishing connections with 3 way handshakes, there's a process for closing the connection. (FIN and ACKs)
Can be in 4 steps (imagine 3way but with the ACK/SYN split into two, and the SYN becomes a FIN)


Congestion Control:
To ensure that the network doesn't get burdened.
Usually some bottleneck in router(s) which leads to packet loss. (compared to Flow control in senders and recievers, and there's a buffer overflow that leads to lost packets)


Scenario 1:
Two hosts/clients, two servers and a network and router in between. Assume infinite buffers
Two flows, 
HostA to Server A
HostB to ServerB
Both connections are getting equal bandwidth (R/2)
Each sender can send as much data as they want, with R/2 bandwidth (Eg. 100/2 MB/s)
What happens when it starts approaching the max amount of data that's sent?
  Once you approach max limit, Lambda-in reaches max (bottleneck) and the actual output to the reciever won't increase.
  The delay increases as it approaches R/2 becomes exponential.
  
Scenario 2: (Finite Buffer)
If something is lost, sender has to retransmit.
There can be retransmissions, something is lost and the sender has to retransmit. (Lambda'-in >= Lambda-in)

Lets assume the sender only sends data when the buffer in the reciever is available.
you have 10 packets but you end up sending 12 and 2 of them are just copies of the ones that were lost in the last transmission. So the actual throughput reduces because actual data is 10 but being sent across is 12.
This leads to wasted capacity.

another case in this scenario can be:
  the buffer is not full but the copy and the original are both sent across. Leading to even lower throughput. 


Scenario 3:
Four senders
Multihop paths
Timeout/retransmit exist

If congestion exists, then entire connections can fail, causing for entire retrans and 0 throughput 



Ways to approach Congestion Control:
Sender sees what's happening and infers that there's congestion and slows down the transfer rate. 
The network or router tells the senders that there's congestion. (TCP Explicit Congestion Notification or ECN, by default it's turned off on some routers)

TCP's Congestion Control:
AIMD (Additive Increase Multiplicative Decrease, increase by 1 each time and decrease by halving)
  once the sides establish congestion, each time the amount of data sent is increased until data loss happens. If congestion happens, then the rate is dropped  
  sawtooth graph
  TCP Reno (packet loss is based on triple ACK, sending rate is dropped down to half)
  TCP Tahoe (packet loss is based on Timeout, 1 Maximum Segment Size)

CWND (congestion window) is adjusted by the OS itself, it's not seen in the headers. It's a dynamic value. 
TCP doubles the sending rate until the SSThresh, and after the threshold, it switches to linear increase of sending rate. (ssthresh is half of cwnd value)
TCP Reno halves the speed. I
TCP Tahoe drops it down to 1 and starts again. This method increases by doubling until the ssthresh. 






DO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINAR
DO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINAR
DO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINAR
DO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINAR
DO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINAR
DO SEMINARDO SEMINARDO SEMINARDO SEMINARDO SEMINAR







































