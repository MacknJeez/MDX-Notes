Application Layer

Top most layer of OSI model / TCP model / Internet Model

Client Server Architecture
Client Server paradigm key concept: One central server(host), job is to process incoming requests. Client cannot operate independently, always request data from server.
Resides in any type of network (insitute, home, enterprise etc.) 
Cleints do not talk to each other directly, happens via server. 
Scalable: Just make bigger server

P2P Architecture
Each host is equal, each host can play role of client or server. (eg. BitTorrent etc)
Services are distributed, clients talk to each other directly. 
No Always on server, clients come and go. (dynamic network env)
Main challenge with p2p scalability: 
  since it's not always on, scalanility means to be able to grow the network, since devices are not always on, possible that services might not be available "Self scalabiity"
  Management of such networks is complex


Processes Communincating

eg kernel process??, printing process requested by an app
eg for processes on different devices: 2fa (by authenticator or something), client browser and server hosting the browser with whatever information on the browser


Thin Client vs Thick Client

Thin Clients are when the lcient side is not involved in any processing, usually just an interface to access server, the server does the heavy lifting. eg. chatGPT, web interfaces for mails 
If you have outlook on your device, then it becomes a Thick Client, as the client is also involved in processing (eg. you can still see your emails if you're not connected to the internet)

2 tier architecture - client and server
3 tier architecture - add another layer of server, eg. client + server + database


Cloud Computing Architecture

Most of the services are being handled on the cloud. IaaS, PaaS, SaaS (eg online office 365)

SaaS
Multitenancy, everyone shares copy of same application (each machine has parititoned data from main server(s), so each machine doesn't have to run an instance of the software), very little control over hardware

PaaS
You get an env, where you have access to a dev platform (usually in POV of developers), the actual specifications of the servers is not the importance of the service.
Suited for companies that plan to develop

IaaS
Compute and Storage is provided, what region of the world it runs in, you can manage the infrastructure of the systems (eg. on this VM i want a linux system) but underlying hardware is still with the datacenters.
In the long run, it's better for cost as you're outsourcing the hardware. The cloud provider is responsible for upgrading.
Great for scalability, as load increasing, the capacity can be changed very easily. (eg. you have 5 VMs, you get more load, tell them to give you 10 VMs)



Processes Communicating Contd. 

Sockets is a way of how the OS can use the underlying network. (kinda like a door)
The Application should be able to send a message, just use socket. The network takes care of the rest.


An application-layer protocol defines: 
what kind of messages can be exchanged
how do the messages look like, what the structure of the emessages are (eg. in email, which part is from, to, cc, message etc)
what does the message mean

Open Protocols: HTTP, SMTP
PRprietary Protocols: Skype, Zoom

note: transport layer is to make sure the info gets to the right application within devices

What transport service does an app need?
Based on how reliable the data needs to be, the appropriate transport layer protocol is chosen
Based on how little delay is needed, " "
Based on minimum throughput (eg. multimedia), " "
Based on Security

Some Transport Protocols:
TCP: Reliable, has control over flow of data to not overflow the reciever, makes sure the network is not congested, makes sure data can be recieved (handshake)
    Does not have: no Security, When the data can be delivered, minimum throughpuut guarantee
    In games, the chat can be done by TCP

UDP: Not Reliable, doesn't really have anything, just sends data regardless of whether it's being recieved properly (eg. video calling), it's v fast cuz no handshake required between sender and reciever
    To get some level of reilability from UDP, as a developer you need to put a mechanism on the Application layer.
    In games, player movements can be done by UDP cuz fastness is good


Securing TCP
Security was an afterthough for these protocols. There is no encryption, all data sent in plaintext.

Transport Layer Security (TLS) is implemented on Application layer by developers.
TLS lib takes content, encrypts and sends through socket.


Web and HTTP
HTTP uses port 80
By default, HTTP is stateless: doesn't store any state information on it's own, so if you go from one web page to another, it won't remember that you are the same person from the previous page. 
Cookies are used for this purpose.


Inside HTTP Request and Response:
When you click on a hyperlink, the response looks like (An example of a Response from a web browser Using HTTP, Lec 3 PPT)
The server tells you what type of content is being sent back to hosts so that the host knows how to render the data properly. (in the content line)














